import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

public class CreateVoting
{

    // socket for connection to SISServer
    static Socket universal;
    private static int port = 53217;
    // message writer
    static MsgEncoder encoder;
    // message reader
    static MsgDecoder decoder;
    // scope of this component
    private static final String SCOPE = "SIS.Scope1";
	// name of this component
    private static final String NAME = "VotingSoftware";
    // messages types that can be handled by this component
    private static final List<String> TYPES = new ArrayList<String>(
        Arrays.asList(new String[] {"Confirm", "Reading", "Alert", "Setting", "Connect", "Emergency","21", "22", "23", "24", "25", "26", "701", "702", "703", "711", "712"}));
    // shared by all kinds of records that can be generated by this component
    private static KeyValueList record = new KeyValueList();
    // shared by all kinds of alerts that can be generated by this component
    private static KeyValueList alert = new KeyValueList();
    //Password for admin priveleges
    private static final String password = "admin";
    // true when voting is closed, false when voting is open
    private static boolean closed = true;
    // Voter table
    private static VoterTable vt  = new VoterTable();

    // Tally Table
    private static TallyTable tt;
    private static boolean ttInit = false;

    /*
     * Main program
     */
    public static void main(String[] args)
    {
		
        while (true)
        {
            try
            {

                // try to establish a connection to SISServer
                universal = connect();

                // bind the message reader to inputstream of the socket
                decoder = new MsgDecoder(universal.getInputStream());
                // bind the message writer to outputstream of the socket
                encoder = new MsgEncoder(universal.getOutputStream());

                /*
                 * construct a Connect message to establish the connection
                 */
					while(!registerComponent());
                KeyValueList conn = new KeyValueList();
                conn.putPair("Scope", SCOPE);
                conn.putPair("MessageType", "Connect");
				conn.putPair("Role", "Basic");
                conn.putPair("Name", NAME);
                encoder.sendMsg(conn);
				

                // KeyValueList for inward messages, see KeyValueList for
                // details
                KeyValueList kvList;

                while (true)
                {
					System.out.println("Polling...");
                    // attempt to read and decode a message, see MsgDecoder for
                    // details
                    kvList = decoder.getMsg();

                    // process that message
                    ProcessMsg(kvList);
                }

            }
            catch (Exception e)
            {
                // if anything goes wrong, try to re-establish the connection
                e.printStackTrace();
                try
                {
                    // wait for 1 second to retry
                    Thread.sleep(1000);
                }
                catch (InterruptedException e2)
                {
                }
                System.out.println("Try to reconnect");
                try
                {
                    universal = connect();
                }
                catch (IOException e1)
                {
                }
            }
        }
    }
    static boolean registerComponent(){
		System.out.println("attempting to register");
		try{
        	KeyValueList reg = new KeyValueList();
        	reg.putPair("MessageType","Register");
        	reg.putPair("MsgId","21");
        	reg.putPair("Scope",SCOPE);
        	reg.putPair("Role","Basic");
        	reg.putPair("Description","Create VotingSoftware Component");
        	reg.putPair("Passcode",password);
        	reg.putPair("SecurityLevel","3");
        	reg.putPair("SourceCode","VS.jar");
        	reg.putPair("Component Description","VotingSoftware checks voters using VoterTable and counts votes into TallyTable");
			reg.putPair("KnowledgeBase","TallyTable,VoterTable");
			reg.putPair("InputMsgID 1", "701");
			reg.putPair("InputMsgID 2", "702");
			reg.putPair("InputMsgID 3", "703");
			reg.putPair("OutputMsgID 1", "711");
			reg.putPair("OutputMsgID 2", "712");
			reg.putPair("OutputMsgID 1", "26");
			encoder.sendMsg(reg);
			return true;
		} catch(Exception e){
			return false;
	}
    }   

    /*
     * used for connect(reconnect) to SISServer
     */
    static Socket connect() throws IOException
    {
        Socket socket = new Socket("127.0.0.1", port);
        return socket;
    }
    private static void genMessage(KeyValueList message){

                message.putPair("Sender",NAME);
                message.putPair("Scope",SCOPE);
                message.putPair("Receiver","CreateUploader");
                
    }
    private static void ProcessMsg(KeyValueList kvList) throws Exception
    {
		KeyValueList message = new KeyValueList();
		
        String scope = kvList.getValue("Scope");
        if (!SCOPE.startsWith(scope))
        {
            return;
        }

        String messageType = kvList.getValue("MessageType");
        if (!TYPES.contains(messageType))
        {
            return;
        }

        String sender = kvList.getValue("Sender");

        String receiver = kvList.getValue("Receiver");

        String purpose = kvList.getValue("Purpose");
        
        String pcode;
        
        String msgId = kvList.getValue("MsgId");

        switch (messageType)
        {
        case "Confirm":
		
            System.out.println("Connect to SISServer successful.");
            break;
        case "Alert":
        	break;
        case "Setting":
			genMessage(message);
        	switch(msgId){
        		case ("703"):
        			pcode = kvList.getValue("Passcode");
        			message.putPair("MessageType","Confirm");
        			message.putPair("MsgId","26");
        			message.putPair("Scope","SIS.Scope1");
        			message.putPair("Sender","VotingSoftware");
        			message.putPair("Receiver","CreateUploader");
    				message.putPair("Description","Acknowledgement (Component acknowledges request to initialize tally table)");
    				message.putPair("AckMsgId","703");
    				String candidateList = kvList.getValue("CandidateList");
        			String[] candidates = candidateList.split(",");
        			if (pcode.equals(password) && !ttInit &&!closed){
    					message.putPair("YesNo","Yes");
    					tt = new TallyTable(candidates.length);
    					for (int i = 0; i < candidates.length; i++){
    						tt.addId(candidates[i]);
    					}
    					ttInit = true;
    					System.out.println("Tally Table created");
        			}
        			else{
        				message.putPair("YesNo","No");
        				if (!pcode.equals(password)){
        					System.out.println("Tally Table not created because of wrong password"); 			
        				}
        				else{
        					System.out.println("Tally Table not created because it was already created.\nPlease deactivate the component before initializing a new tally table.");
        				}
        			}
        			message.putPair("Name","VotingSoftware");
        			break;
        		case("24"):
        			pcode = kvList.getValue("Passcode");
        			message.putPair("MessageType","Confirm");
        			message.putPair("Scope","SIS.Scope1");
        			message.putPair("Sender","VotingSoftware");
        			message.putPair("Receiver","CreateUploader");
    				message.putPair("Description","Acknowledgement (Component acknowledges activation request)");
    				message.putPair("AckMsgId","23");
        			if (pcode.equals(password)){
    					message.putPair("YesNo","Yes");
    					System.out.println("Component Activated");
    					closed = false;
        			}
        			else{
        				message.putPair("YesNo","No");
        				System.out.println("Component not activated because of wrong password");
        			}
        			message.putPair("Name","VotingSoftware");
        			break;
        		//Deactivate component
        		case "25":
        			pcode = kvList.getValue("Passcode");
        			message.putPair("MessageType","Confirm");
        			message.putPair("Scope","SIS.Scope1");
        			message.putPair("Sender","VotingSoftware");
        			message.putPair("Receiver","CreateUploader");
    				message.putPair("Description","Acknowledgement (Component acknowledges deactivation request)");
    				message.putPair("AckMsgId","25");
        			if (pcode.equals(password)){
    					message.putPair("YesNo","Yes");
    					System.out.println("Component deactivated");
    					closed = true;
        			}		
        		else{
        			message.putPair("YesNo","No");
        			System.out.println("Component not deactivated because of wrong password");
        		}
        		message.putPair("Name","VotingSoftware");
        		break;
        }
        break;
        case "Connect":
        	break;
        //Kill component
        case "Emergency":
			genMessage(message);
        	if (msgId.equals("22")){
        		pcode = kvList.getValue("Passcode");
        		message.putPair("MessageType","Alert");
        		message.putPair("Scope","SIS.Scope1");
        		message.putPair("Sender","VotingSoftware");
    			message.putPair("Description","Acknowledgement (Component acknowledges kill)");
    			message.putPair("AckMsgId","22");
        		if (pcode.equals(password)){
    				message.putPair("YesNo","Yes");
    				message.putPair("Name","VotingSoftware");
    				encoder.sendMsg(message);
    				System.out.println("Killing component");
    				System.exit(0);
        		}
        		else{
        			message.putPair("YesNo","No");
        			message.putPair("Name","VotingSoftware");
        			System.out.println("Component not killed because of wrong password");
        		}
        	}
        	break;
        case "Reading":
			genMessage(message);
        	switch(msgId){
        		//Cast vote
        		case "701":
        			message.putPair("MessageType","Reading");
        			message.putPair("Scope","SIS.Scope1");
        			message.putPair("Sender","VotingSoftware");
    				message.putPair("Description","Acknowledgement Vote");
        			if (!closed && ttInit){
        				String phone = kvList.getValue("VoterPhoneNo");
        				String candidate = kvList.getValue("CandidateID");
        				if (vt.addVoter(phone,candidate)){
        					if (tt.addVote(candidate)){
        						message.putPair("Status","3");
								message.putPair("error","none");
        						System.out.println("Vote successfully added");
        					}
        					else{
        						message.putPair("Status","2");
								message.putPair("error","Invalid Candidate ID");
        						System.out.println("Invalid candidate ID");
        					}
        				}
        				else{
        					message.putPair("Status","1");
							message.putPair("error","Duplicate Vote");
        					System.out.println("Duplicate vote");
        				}
        			}
        			else{
        				message.putPair("Status","2");
						message.putPair("error","Voting Closed");
    					System.out.println("Voting is closed");
        			}
        			break;
        		 case "702":
        			pcode = kvList.getValue("Passcode");
        			int n = Integer.parseInt(kvList.getValue("N"));
        			String report = new String("Please enter correct password");
        			message.putPair("MessageType","Reading");
        			message.putPair("Scope","SIS.Scope1");
        			message.putPair("Sender","VotingSoftware");
    				message.putPair("Description","Acknowledge Request Report");
        			if (pcode.equals(password)){
        				message.putPair("YesNo","Yes");
        				report = tt.getResults(n);
        			}
        			else{
        				message.putPair("YesNo","No");
        			}
        			message.putPair("RankedReport",report);
        			System.out.println(report);
        			break;
        	}
        	break;
        
        //Request report
       
        default:
			genMessage(message);
            message.putPair("MessageType","ERROR");
            message.putPair("Description","Unable to process message");
            System.out.println("There was an error with your message");
            break;
        }
        encoder.sendMsg(message);


    }
    
    //Testing method
    private static boolean test(String first, String second, String last){
    	String result = new String(first + " " + second + last);
    	System.out.println(result);
    	if (result.equals("Hello World!")) return true;
    	else return false;
    }
}
